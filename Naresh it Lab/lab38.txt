Q.1)
/*
Remove Characters
Write a C Program to Remove Characters in Second String which are present in First String.
*/

#include <stdio.h>
#include <string.h>
int main()
{
    char s1[100], s2[100];
    int i, j, f;
    printf("Enter the 1st string ");
    scanf("%s", s1);
    printf("Enter the 2nd string ");
    scanf("%s", s2);
    for (i = 0; s1[i] != '\0'; i++)
    {
        for (j = 0; s2[j] != '\0'; j++)
            if (s1[i] == s2[j])
            {
                for (int k = j; s2[k] != '\0'; k++)
                    s2[k] = s2[k + 1];
            }
    }
    printf("%s", s2);
}
================================================================================================================
Q.2)
/*
Reverse Words
Write a C program to reverse Words of the Given String?
*/

#include <stdio.h>
int main()
{
    char s[100];
    int i, j, temp = 0;
    printf("Enter the strings ");
    gets(s);
    for (i = 0; s[i] != '\0'; i++)
    {
        if (s[i] == ' ' || s[i + 1] == '\0')
        {
            for (j = i; j >= temp; j--)
                printf("%c", s[j]);
            temp = i;
        }
    }

    return 0;
}
================================================================================================================
Q.3)
/*
Reverse All the Vowels
Write a C program to reverse all the vowels present in a given string. Return the newly created string or modified string .
*/

#include <stdio.h>
#include <string.h>
int main()
{
    char s1[100];
    int i, j;
    printf("enter the string ");
    scanf("%s", s1);
    int len = strlen(s1);
    j = len - 1;
    for (i = 0; i < len / 2; i++)
    {
        if (s1[i] == 'a' || s1[i] == 'e' || s1[i] == 'i' || s1[i] == 'o' || s1[i] == 'u' || s1[i] == 'A' || s1[i] == 'E' || s1[i] == 'I' || s1[i] == 'O' || s1[i] == 'U')
        {

            if (s1[j] == 'a' || s1[j] == 'e' || s1[j] == 'i' || s1[j] == 'o' || s1[j] == 'u' || s1[j] == 'A' || s1[j] == 'E' || s1[j] == 'I' || s1[j] == 'O' || s1[j] == 'U')
            {
                char t = s1[i];
                s1[i] = s1[j];
                s1[j] = t;
                j--;
            }
            else
            {
                i--;
                j--;
            }
        }
    }

    printf("%s", s1);
    return 0;
}
=================================================================================================================
Q.4)
/*
prime Position
write a c Program to Display All Characters Present in the Prime Position of a String.
*/

#include <stdio.h>
int main()
{
    char s[100];
    int i, j;
    printf("Enter your strings ");
    gets(s);
    for (i = 0; s[i] != '\0'; i++)
    {
        int c = 0;
        for (j = 1; j <= i; j++)
        {
            if (i % j == 0)
                c++;
        }
        if (c == 2)
            printf("%c", s[i]);
    }

    return 0;
}
